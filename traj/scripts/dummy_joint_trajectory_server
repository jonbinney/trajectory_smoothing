#!/usr/bin/env python3
import actionlib
import copy
from control_msgs.msg import FollowJointTrajectoryAction, FollowJointTrajectoryGoal
import numpy as np
import rospy
from sensor_msgs.msg import JointState
import threading


class Trajectory:
    def __init__(self, joint_names, times, positions, velocities=None, accelerations=None):
        self.joint_names = joint_names
        self.times = times
        self.positions = positions
        self.velocities = velocities
        self.accelerations = accelerations

    @staticmethod
    def from_message(trajectory_message):
        times = np.array([p.time_from_start.to_sec() for p in trajectory_message.points])
        positions = np.array([p.positions for p in trajectory_message.points])
        return Trajectory(trajectory_message.joint_names, times, positions)

    def get_all_joint_positions(self, time_from_start):
        return np.array(
            [self.get_joint_position(joint_i, time_from_start) for joint_i in range(
                len(self.joint_names))])

    def get_joint_position(self, joint_i, time_from_start):
        # TODO (maybe): Use cubic interpolation if we know velocities.
        return np.interp(time_from_start, self.times, self.positions[:, joint_i])


class DummyJointTrajectoryServer:
    def __init__(self):
        self._num_joints = 6
        self._joint_names = ['joint_{}'.format(n) for n in range(1, self._num_joints + 1)]
        self._joint_positions = np.zeros((self._num_joints,))

        # Currently executing trajectory.
        self._current_trajectory = None
        self._current_trajectory_start_time = None
        self._current_trajectory_complete = False
        self._current_trajectory_lock = threading.Lock()

        self._joint_state_publisher = rospy.Publisher('joint_states', JointState, queue_size=100)
        self._action_server = actionlib.SimpleActionServer(
            'joint_trajectory_action', FollowJointTrajectoryAction, self.execute_joint_trajectory,
            auto_start=False)

        # Start everything.
        self._action_server.start()
        self._joint_state_pub_timer = rospy.Timer(rospy.Duration(0.01), self.update_joint_state)

    def update_joint_state(self, _):
        t = rospy.Time.now()

        # If we're simulating a trajectory, interpolate the joint state from it.
        with self._current_trajectory_lock:
            if self._current_trajectory is not None:
                time_from_start = (t - self._current_trajectory_start_time).to_sec()
                self._joint_positions = self._current_trajectory.get_all_joint_positions(time_from_start)
                if time_from_start >= self._current_trajectory.times[-1]:
                    self._current_trajectory_complete = True

        # Publish the current joint state.
        joint_state_message = JointState()
        joint_state_message.header.stamp = t
        joint_state_message.name = copy.copy(self._joint_names)
        joint_state_message.position = list(self._joint_positions)
        self._joint_state_publisher.publish(joint_state_message)

    def execute_joint_trajectory(self, joint_trajectory_goal):
        with self._current_trajectory_lock:
            self._current_trajectory = Trajectory.from_message(joint_trajectory_goal.trajectory)
            self._current_trajectory_start_time = rospy.Time.now()
            self._current_trajectory_complete = False

        poll_for_completion_rate = rospy.Rate(100)
        while True:
            if rospy.is_shutdown():
                self._action_server.set_failed()
                break

            if self._action_server.is_preempt_requested():
                self._action_server.set_preempted()
                break

            with self._current_trajectory_lock:
                if self._current_trajectory_complete:
                    self._action_server.set_succeeded()
                    break

            poll_for_completion_rate.sleep()

def main():
    rospy.init_node('dummy_joint_trajectory_server')
    server = DummyJointTrajectoryServer()
    rospy.spin()

if __name__ == '__main__':
    main()
