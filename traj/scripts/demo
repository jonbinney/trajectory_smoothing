#!/usr/bin/env python3
"""
Simple example that parametrizes a 2d joint-space path.
"""
import actionlib
from control_msgs.msg import FollowJointTrajectoryAction, FollowJointTrajectoryGoal
from trajectory_msgs.msg import JointTrajectoryPoint
from matplotlib import pyplot as plt
import numpy as np
import rospy
from sensor_msgs.msg import JointState

import traj


def create_joint_trajectory_goal(piecewise_position_function, joint_names, sample_period=0.008):
    # Non-zero start times won't make sense to the controller
    assert piecewise_position_function.boundaries[0] == 0.0
    goal = FollowJointTrajectoryGoal()
    goal.trajectory.header.stamp = rospy.Time(0)
    goal.trajectory.header.frame_id = ''
    goal.trajectory.joint_names = joint_names

    # The joint_trajectory_controller can cut off the first point. To make sure everything is nice and smooth,
    # we copy the initial point several times.
    initial_position = list(piecewise_position_function(0.0))
    for dwell_point_i in range(10):
        point = JointTrajectoryPoint()
        point.time_from_start = rospy.Duration(dwell_point_i * sample_period)
        point.positions = initial_position
        goal.trajectory.points.append(point)
    dwell_time = (dwell_point_i + 1) * sample_period

    for t in np.arange(0.0, piecewise_position_function.boundaries[-1], sample_period):
        point = JointTrajectoryPoint()
        point.time_from_start = rospy.Duration(t + dwell_time)
        point.positions = list(piecewise_position_function(t))
        goal.trajectory.points.append(point)
    return goal


# Joint limits for a fictional 6DoF arm.

max_velocities = np.deg2rad(np.array([
    150.0,
    150.0,
    200.0,
    300.0,
    300.0,
    600.0,
]))

max_accelerations = np.deg2rad(np.array([
    500.0,
    500.0,
    700.0,
    1100.0,
    1100.0,
    2500.0,
]))

max_jerks = np.deg2rad(np.array([
    4500.0,
    4500.0,
    5000.0,
    8000.0,
    8000.0,
    16000.0,
]))

rospy.init_node('traj_demo')

# Whether to send the computed trajectory to a FollowJointTrajectory action server.
execute = rospy.get_param('~execute', False)

# Whether to pop up a graphical plot of the computed trajectory.
plot = rospy.get_param('~plot', True)

# We assume the joint names of the arm are of the form <joint_prefix>joint_<i>
joint_prefix = rospy.get_param('~joint_prefix', '')

if execute:
    follow_trajectory_client = actionlib.SimpleActionClient('joint_trajectory_action', FollowJointTrajectoryAction)
    rospy.loginfo('Waiting for joint trajectory action server')
    follow_trajectory_client.wait_for_server()
    rospy.loginfo('Connected to joint trajectory server')

joint_names = [joint_prefix + name for name in [
    'joint_1', 'joint_2', 'joint_3', 'joint_4', 'joint_5', 'joint_6']]

if execute:
    rospy.loginfo('Waiting for initial joint states')
    initial_joint_states = rospy.wait_for_message('/joint_states', JointState).position
    rospy.loginfo('Set initial values based on current joint states')
else:
    initial_joint_states = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0)

# Simple path
path = np.array([initial_joint_states, (1.5, 0.7, 0.3, 0.0, -0.3, 0.0), initial_joint_states,
                 (-1.5, 0.7, 0.3, 0.0, -0.3, 0.0), initial_joint_states])

print('Computing trajectory')
(trajectory_position_function, trajectory_velocity_function, trajectory_acceleration_function,
 trajectory_jerk_function) = traj.trajectory_for_path(path, max_velocities, max_accelerations, max_jerks)
print('Done computing trajectory')

goal = create_joint_trajectory_goal(trajectory_position_function, joint_names, sample_period=0.008)

if execute:
    follow_trajectory_client.send_goal(goal)
    follow_trajectory_client.wait_for_result()

# Let rospy finish up before we turn the main thread over to matplotlib. This just
# avoids warnings about dropped connections from other nodes.
rospy.signal_shutdown('Node done')

if plot:
    traj.plot.plot_trajectory(plt.figure(), trajectory_position_function, trajectory_velocity_function,
                              trajectory_acceleration_function, trajectory_jerk_function)

    plt.figure()
    traj.plot.plot_2d_path(plt.gca(), trajectory_position_function, 100, label='trajectory points')
    # Plot the waypoints in the original path for comparison.
    plt.plot([q[0] for q in path], [q[1] for q in path], 'bx', label='original waypoints')
    plt.show()
